/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.RegistrarRole.ManageStudentEnrollment;

import Business.Business;
import Business.CourseSchedule.CourseLoad;
import Business.CourseSchedule.CourseOffer;
import Business.CourseSchedule.CourseSchedule;
import Business.CourseSchedule.Seat;
import Business.CourseSchedule.SeatAssignment;
import Business.Profiles.StudentProfile;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anush
 */
public class ManageStudentEnrollmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStudentEnrollmentJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    
    public ManageStudentEnrollmentJPanel(Business b, JPanel jp) {
        initComponents();
        this.business = b;
        this.CardSequencePanel = jp;
        
        populateStudentCombo();
        populateSemesterCombo();
        populateCourseCombo();
        refreshTable();
    
    } 
        
        private void populateStudentCombo() {
            cmbSelectStudents.removeAllItems();
            cmbSelectStudents.addItem("-- Select Student --");
            for (StudentProfile sp : business.getStudentDirectory().getStudentList()) {
                cmbSelectStudents.addItem(sp.getPerson().getName());
            }
        }

        private void populateSemesterCombo() {
            cmbSelectSemester.removeAllItems();
            cmbSelectSemester.addItem("-- Select Semester --");
            HashMap<String, CourseSchedule> schedules = business.getMasterCourseCatalog();
            for (String semester : schedules.keySet()) {
                cmbSelectSemester.addItem(semester);
            }
        }

        private void populateCourseCombo() {
            cmbSelectCourse.removeAllItems();
            cmbSelectCourse.addItem("-- Select Course --");
            HashMap<String, CourseSchedule> schedules = business.getMasterCourseCatalog();
            for (CourseSchedule cs : schedules.values()) {
                for (CourseOffer co : cs.getSchedule()) {
                    cmbSelectCourse.addItem(co.getCourseNumber() + " - " + co.getSubjectCourse().getName());
                }
            }
        }

         private void refreshTable() {
            DefaultTableModel model = (DefaultTableModel) tblEnrollments.getModel();
            model.setRowCount(0);

            HashMap<String, CourseSchedule> schedules = business.getMasterCourseCatalog();
            for (String semester : schedules.keySet()) {
                CourseSchedule cs = schedules.get(semester);
                for (CourseOffer co : cs.getSchedule()) {
                    if (co.getSeatList().isEmpty()) continue;

                    for (Seat seat : co.getSeatList()) {
                        if (!seat.isOccupied() || seat.getSeatAssignment() == null) continue;

                        StudentProfile sp = seat.getSeatAssignment().getStudentProfile();
                        if (sp == null) continue;

                        Object[] row = new Object[5];
                        row[0] = sp.getPerson().getPersonId();
                        row[1] = sp.getPerson().getName();
                        row[2] = semester;
                        row[3] = co.getCourseNumber();
                        row[4] = co.getSubjectCourse().getName();
                        model.addRow(row);
                    }
                }
            }
        }


    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnrollments = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        btnEnroll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDrop = new javax.swing.JButton();
        lblselectStudent = new javax.swing.JLabel();
        cmbSelectStudents = new javax.swing.JComboBox<>();
        lblSelectSemester = new javax.swing.JLabel();
        cmbSelectSemester = new javax.swing.JComboBox<>();
        lblSelectCourse = new javax.swing.JLabel();
        cmbSelectCourse = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(0, 153, 153));
        setForeground(new java.awt.Color(0, 204, 204));

        tblEnrollments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Student Name", "Semester", "Course ID", "Course name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEnrollments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblEnrollmentsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblEnrollments);

        backButton.setText("<<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        btnEnroll.setBackground(new java.awt.Color(0, 204, 255));
        btnEnroll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEnroll.setForeground(new java.awt.Color(255, 255, 255));
        btnEnroll.setText("Enroll");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Enroll Student Records");

        btnDrop.setBackground(new java.awt.Color(255, 0, 0));
        btnDrop.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDrop.setForeground(new java.awt.Color(255, 255, 255));
        btnDrop.setText("Drop");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        lblselectStudent.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        lblselectStudent.setText("Select Student:");

        cmbSelectStudents.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblSelectSemester.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        lblSelectSemester.setText("Select Semester:");

        cmbSelectSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblSelectCourse.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSelectCourse.setText("Select Course:");

        cmbSelectCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSelectSemester)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbSelectSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblselectStudent)
                                        .addGap(29, 29, 29)
                                        .addComponent(cmbSelectStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(83, 83, 83)
                                .addComponent(lblSelectCourse)
                                .addGap(29, 29, 29)
                                .addComponent(cmbSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnEnroll, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(276, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblselectStudent)
                    .addComponent(cmbSelectStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectCourse)
                    .addComponent(cmbSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectSemester)
                    .addComponent(cmbSelectSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnroll)
                    .addComponent(btnDrop))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(backButton)
                .addContainerGap(248, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblEnrollmentsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEnrollmentsMousePressed
        // TODO add your handling code here:
    
        
    }//GEN-LAST:event_tblEnrollmentsMousePressed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void resetFields() {
    cmbSelectSemester.setSelectedIndex(0);
    cmbSelectStudents.setSelectedIndex(0);
    cmbSelectCourse.setSelectedIndex(0);
}

    
    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        // TODO add your handling code here:
       // Get selected student, semester, and course
       String studentName = cmbSelectStudents.getSelectedItem().toString().trim();
        String semester = cmbSelectSemester.getSelectedItem().toString().trim();
        String courseSelection = cmbSelectCourse.getSelectedItem().toString();

        if (studentName.equals("-- Select Student --") || semester.equals("-- Select Semester --") ||
                courseSelection.equals("-- Select Course --")) {
            JOptionPane.showMessageDialog(this, "Please select all fields properly.");
            return;
        }

        String courseId = courseSelection.split(" - ")[0].trim();

        // 1️⃣ find student
        StudentProfile selectedStudent = null;
        for (StudentProfile sp : business.getStudentDirectory().getStudentList()) {
            if (sp.getPerson().getName().equalsIgnoreCase(studentName)) {
                selectedStudent = sp;
                break;
            }
        }

        if (selectedStudent == null) {
            JOptionPane.showMessageDialog(this, "Student not found.");
            return;
        }

        // 2️⃣ find semester schedule
        CourseSchedule cs = business.getMasterCourseCatalog().get(semester);
        if (cs == null) {
            JOptionPane.showMessageDialog(this, "Semester not found!");
            return;
        }

        // 3️⃣ find the specific course in that semester
        CourseOffer targetCourse = null;
        for (CourseOffer co : cs.getSchedule()) {
            if (co.getCourseNumber().equals(courseId)) {
                targetCourse = co;
                break;
            }
        }

        if (targetCourse == null) {
            JOptionPane.showMessageDialog(this, "Course not found in selected semester");
            return;
        }

        // 4️⃣ ensure the student has a CourseLoad for that semester
        CourseLoad courseLoad = selectedStudent.getCourseLoadBySemester(semester);
        if (courseLoad == null) {
            courseLoad = new CourseLoad(semester, selectedStudent);
            selectedStudent.getCourseLoadList().put(semester, courseLoad);
        }

        // 5️⃣ assign a seat
        SeatAssignment sa = targetCourse.assignEmptySeat(courseLoad);
        if (sa == null) {
            JOptionPane.showMessageDialog(this, "No empty seats available in this course!");
            return;
        }

        JOptionPane.showMessageDialog(this, "Student enrolled successfully!");
        refreshTable();
        resetFields();

    
    }//GEN-LAST:event_btnEnrollActionPerformed

    
    
    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        int row = tblEnrollments.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to drop.");
            return;
        }
        String studentId = tblEnrollments.getValueAt(row, 0).toString();
        String semester  = tblEnrollments.getValueAt(row, 2).toString();
        String courseId  = tblEnrollments.getValueAt(row, 3).toString();

        CourseSchedule cs = business.getMasterCourseCatalog().get(semester);
        if (cs == null) { JOptionPane.showMessageDialog(this, "Semester not found"); return; }

        for (CourseOffer co : cs.getSchedule()) {
            if (courseId.equals(co.getCourseNumber())) {
                co.dropStudentById(studentId);
                JOptionPane.showMessageDialog(this, "Student dropped.");
                refreshTable();
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Course not found");
 
        
    }//GEN-LAST:event_btnDropActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JComboBox<String> cmbSelectCourse;
    private javax.swing.JComboBox<String> cmbSelectSemester;
    private javax.swing.JComboBox<String> cmbSelectStudents;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSelectCourse;
    private javax.swing.JLabel lblSelectSemester;
    private javax.swing.JLabel lblselectStudent;
    private javax.swing.JTable tblEnrollments;
    // End of variables declaration//GEN-END:variables
}
