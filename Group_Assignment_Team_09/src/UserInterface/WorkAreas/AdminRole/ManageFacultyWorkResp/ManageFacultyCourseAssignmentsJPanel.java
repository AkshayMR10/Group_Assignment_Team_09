/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageFacultyWorkResp;

import Business.Business;
import Business.CourseSchedule.CourseSchedule;
import Business.CourseSchedule.CourseOffer;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import Business.Person.Person;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.HashMap;

/**
 *
 * @author aksha
 */
public class ManageFacultyCourseAssignmentsJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Business business;
    CourseOffer selectedCourseOffer;
    String currentSemester;

    /**
     * Creates new form ManageFacultyCourseAssignmentsJPanel1
     */
    public ManageFacultyCourseAssignmentsJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();

        courseAssignmentTable.getColumnModel().getColumn(0).setMinWidth(0);
        courseAssignmentTable.getColumnModel().getColumn(0).setMaxWidth(0);
        courseAssignmentTable.getColumnModel().getColumn(0).setWidth(0);

        // Populate semester dropdown
        populateSemesterDropdown();

        // Populate faculty dropdown
        populateFacultyDropdown();

        // Load course assignments
        refreshTable();
    }

    private void populateSemesterDropdown() {
        semesterComboBox.removeAllItems();
        semesterComboBox.addItem("All Semesters");

        HashMap<String, CourseSchedule> schedules = business.getMasterCourseCatalog();
        for (String semester : schedules.keySet()) {
            semesterComboBox.addItem(semester);
        }

        semesterComboBox.setSelectedIndex(0);
    }

    private void populateFacultyDropdown() {
        facultyComboBox.removeAllItems();
        facultyComboBox.addItem("-- Select Faculty --");

        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile fp : facultyDir.getFacultyList()) {
            facultyComboBox.addItem(fp);
        }
    }

    public void refreshTable() {
        // Clear table
        int rc = courseAssignmentTable.getRowCount();
        for (int i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) courseAssignmentTable.getModel()).removeRow(i);
        }

        String selectedSemester = (String) semesterComboBox.getSelectedItem();

        // Null check - if nothing selected, default to "All Semesters"
        if (selectedSemester == null) {
            selectedSemester = "All Semesters";
        }

        HashMap<String, CourseSchedule> schedules = business.getMasterCourseCatalog();

        // Iterate through semesters
        for (String semester : schedules.keySet()) {
            // Filter by selected semester if not "All Semesters"
            if (!selectedSemester.equals("All Semesters") && !semester.equals(selectedSemester)) {
                continue;
            }

            CourseSchedule cs = schedules.get(semester);

            // Iterate through course offers
            for (CourseOffer co : cs.getSchedule()) {
                Object[] row = new Object[6];
                row[0] = co; // Store object
                row[1] = semester;
                row[2] = co.getCourseNumber();
                row[3] = co.getSubjectCourse().getName();

                // Get assigned faculty
                FacultyProfile fp = co.getFacultyProfile();
                if (fp != null) {
                    row[4] = fp.getPerson().getName();
                    row[5] = fp.getDepartment();
                } else {
                    row[4] = "Not Assigned";
                    row[5] = "-";
                }

                ((DefaultTableModel) courseAssignmentTable.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        semesterComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseAssignmentTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        facultyComboBox = new javax.swing.JComboBox<>();
        assignFacultyButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        removeAssignmentButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Manage Faculty Course Assignments");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Filter by semester:");

        semesterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        semesterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semesterComboBoxActionPerformed(evt);
            }
        });

        courseAssignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Select", "Semester", "Course ID", "Course Name", "Assigned Faculty", "Faculty Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseAssignmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                courseAssignmentTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(courseAssignmentTable);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Assign Faculty:");

        facultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        assignFacultyButton.setBackground(new java.awt.Color(0, 204, 255));
        assignFacultyButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        assignFacultyButton.setForeground(new java.awt.Color(255, 255, 255));
        assignFacultyButton.setText("Assign to selected Course");
        assignFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignFacultyButtonActionPerformed(evt);
            }
        });

        refreshButton.setBackground(new java.awt.Color(102, 102, 102));
        refreshButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        removeAssignmentButton.setBackground(new java.awt.Color(255, 153, 0));
        removeAssignmentButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeAssignmentButton.setForeground(new java.awt.Color(255, 255, 255));
        removeAssignmentButton.setText("Remove Assignment");
        removeAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAssignmentButtonActionPerformed(evt);
            }
        });

        backButton.setText("<<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 963, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(semesterComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(removeAssignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(facultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(assignFacultyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(229, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(semesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(facultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignFacultyButton)
                    .addComponent(refreshButton))
                .addGap(37, 37, 37)
                .addComponent(removeAssignmentButton)
                .addGap(18, 18, 18)
                .addComponent(backButton)
                .addContainerGap(261, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void removeAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAssignmentButtonActionPerformed
        // TODO add your handling code here:
        if (selectedCourseOffer == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select a course from the table",
                    "No Course Selected",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        FacultyProfile currentFaculty = selectedCourseOffer.getFacultyProfile();

        if (currentFaculty == null) {
            JOptionPane.showMessageDialog(this,
                    "This course has no faculty assigned",
                    "No Assignment",
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Remove faculty assignment from this course?\n\n"
                + "Course: " + selectedCourseOffer.getCourseNumber() + " - "
                + selectedCourseOffer.getSubjectCourse().getName() + "\n"
                + "Current Faculty: " + currentFaculty.getPerson().getName() + "\n\n"
                + "The course will have no assigned instructor.",
                "Confirm Removal",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            // Remove assignment by setting to null
            selectedCourseOffer.AssignAsTeacher(null);

            JOptionPane.showMessageDialog(this,
                    "Faculty assignment removed successfully",
                    "Removal Successful",
                    JOptionPane.INFORMATION_MESSAGE);

            // Refresh table
            refreshTable();
        }
    }//GEN-LAST:event_removeAssignmentButtonActionPerformed

    private void assignFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignFacultyButtonActionPerformed
        // TODO add your handling code here:
        // Validate selections
        if (selectedCourseOffer == null) {
            JOptionPane.showMessageDialog(this,
                    "Please select a course from the table",
                    "No Course Selected",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (facultyComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select a faculty member from the dropdown",
                    "No Faculty Selected",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        FacultyProfile selectedFaculty = (FacultyProfile) facultyComboBox.getSelectedItem();

        // Check if course already has faculty assigned
        FacultyProfile currentFaculty = selectedCourseOffer.getFacultyProfile();
        String message;

        if (currentFaculty != null) {
            // Reassignment
            message = "Reassign faculty for this course?\n\n"
                    + "Course: " + selectedCourseOffer.getCourseNumber() + " - "
                    + selectedCourseOffer.getSubjectCourse().getName() + "\n"
                    + "Semester: " + currentSemester + "\n\n"
                    + "Current Faculty: " + currentFaculty.getPerson().getName() + "\n"
                    + "New Faculty: " + selectedFaculty.getPerson().getName();
        } else {
            // New assignment
            message = "Assign faculty to this course?\n\n"
                    + "Course: " + selectedCourseOffer.getCourseNumber() + " - "
                    + selectedCourseOffer.getSubjectCourse().getName() + "\n"
                    + "Semester: " + currentSemester + "\n"
                    + "Faculty: " + selectedFaculty.getPerson().getName() + " (" + selectedFaculty.getDepartment()
                    + ")";
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                message,
                "Confirm Assignment",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            // Assign faculty to course
            selectedCourseOffer.AssignAsTeacher(selectedFaculty);

            JOptionPane.showMessageDialog(this,
                    "Faculty assigned successfully!\n\n"
                    + selectedFaculty.getPerson().getName() + " is now teaching "
                    + selectedCourseOffer.getCourseNumber(),
                    "Assignment Successful",
                    JOptionPane.INFORMATION_MESSAGE);

            // Refresh table
            refreshTable();

            // Reset selections
            facultyComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_assignFacultyButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        populateFacultyDropdown();
        refreshTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void courseAssignmentTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseAssignmentTableMousePressed
        // TODO add your handling code here:
        int selectedRow = courseAssignmentTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedRow < 0 || selectedRow >= courseAssignmentTable.getRowCount()) {
            return;
        }

        selectedCourseOffer = (CourseOffer) courseAssignmentTable.getValueAt(selectedRow, 0);
        currentSemester = (String) courseAssignmentTable.getValueAt(selectedRow, 1);
    }//GEN-LAST:event_courseAssignmentTableMousePressed

    private void semesterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semesterComboBoxActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_semesterComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignFacultyButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable courseAssignmentTable;
    private javax.swing.JComboBox<Object> facultyComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeAssignmentButton;
    private javax.swing.JComboBox<String> semesterComboBox;
    // End of variables declaration//GEN-END:variables
}
