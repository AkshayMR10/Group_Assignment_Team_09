/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageRegistrarWorkResp;

import Business.Business;
import Business.Person.Person;
import Business.Profiles.RegistrarDirectory;
import Business.Profiles.RegistrarProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/**
 *
 * @author aksha
 */
public class ManageRegistrarJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Business business;
    RegistrarProfile selectedRegistrar;

    public ManageRegistrarJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();

        // Populate search type combo box
        searchTypeComboBox.removeAllItems();
        searchTypeComboBox.addItem("Name");
        searchTypeComboBox.addItem("University ID");
        searchTypeComboBox.addItem("Department");

        // Load all registrars initially
        refreshTable();
    }

    public void refreshTable() {
        // Clear table
        int rc = registrarTable.getRowCount();
        for (int i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) registrarTable.getModel()).removeRow(i);
        }

        RegistrarDirectory registrarDir = business.getRegistrarDirectory();

        for (RegistrarProfile rp : registrarDir.getRegistrarList()) {
            Person p = rp.getPerson();
            Object[] row = new Object[5];
            row[0] = rp;  // Store the object for later retrieval
            row[1] = p.getUniversityId();
            row[2] = p.getName();
            row[3] = p.getEmail();
            row[4] = rp.getDepartment();

            ((DefaultTableModel) registrarTable.getModel()).addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchTypeComboBox = new javax.swing.JComboBox<>();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        showAllButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        registrarTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        viewEditButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Manage Registrar Records");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Search By:");

        searchTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchButton.setBackground(new java.awt.Color(0, 204, 255));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        showAllButton.setBackground(new java.awt.Color(153, 153, 153));
        showAllButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        showAllButton.setForeground(new java.awt.Color(255, 255, 255));
        showAllButton.setText("Show All");
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });

        registrarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Select", "University ID", "Name", "Email", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        registrarTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                registrarTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(registrarTable);

        backButton.setText("<<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewEditButton.setBackground(new java.awt.Color(0, 204, 255));
        viewEditButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewEditButton.setForeground(new java.awt.Color(255, 255, 255));
        viewEditButton.setText("View/Edit");
        viewEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEditButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(backButton)
                            .addGap(528, 528, 528)
                            .addComponent(viewEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(searchTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(showAllButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(viewEditButton)
                    .addComponent(deleteButton))
                .addContainerGap(363, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchTextField.getText().trim();
        String searchType = (String) searchTypeComboBox.getSelectedItem();

        if (searchTerm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter search term", "Search Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Clear table
        int rc = registrarTable.getRowCount();
        for (int i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) registrarTable.getModel()).removeRow(i);
        }

        RegistrarDirectory registrarDir = business.getRegistrarDirectory();
        ArrayList<RegistrarProfile> results = new ArrayList<>();

        // Perform search based on type
        if (searchType.equals("Name")) {
            results = registrarDir.searchByName(searchTerm);
        } else if (searchType.equals("University ID")) {
            RegistrarProfile rp = registrarDir.searchByUniversityId(searchTerm);
            if (rp != null) {
                results.add(rp);
            }
        } else if (searchType.equals("Department")) {
            results = registrarDir.searchByDepartment(searchTerm);
        }

        // Display results
        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No registrars found matching: " + searchTerm, "Search Results", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (RegistrarProfile rp : results) {
                Person p = rp.getPerson();
                Object[] row = new Object[5];
                row[0] = rp;
                row[1] = p.getUniversityId();
                row[2] = p.getName();
                row[3] = p.getEmail();
                row[4] = rp.getDepartment();

                ((DefaultTableModel) registrarTable.getModel()).addRow(row);
            }

            JOptionPane.showMessageDialog(this, "Found " + results.size() + " registrar(s)", "Search Results", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
        // TODO add your handling code here:
        searchTextField.setText("");
        refreshTable();
    }//GEN-LAST:event_showAllButtonActionPerformed

    private void registrarTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrarTableMousePressed
        // TODO add your handling code here:
        int selectedRow = registrarTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedRow < 0 || selectedRow >= registrarTable.getRowCount()) {
            return;
        }

        selectedRegistrar = (RegistrarProfile) registrarTable.getValueAt(selectedRow, 0);
    }//GEN-LAST:event_registrarTableMousePressed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void viewEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEditButtonActionPerformed
        // TODO add your handling code here:
        if (selectedRegistrar == null) {
            JOptionPane.showMessageDialog(this, "Please select a registrar from the table", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        RegistrarDetailJPanel detailPanel = new RegistrarDetailJPanel(business, CardSequencePanel, selectedRegistrar, this);
        CardSequencePanel.add("RegistrarDetail", detailPanel);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_viewEditButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (selectedRegistrar == null) {
            JOptionPane.showMessageDialog(this, "Please select a registrar from the table", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Person p = selectedRegistrar.getPerson();
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this registrar?\n\n"
                + "University ID: " + p.getUniversityId() + "\n"
                + "Name: " + p.getName() + "\n"
                + "Email: " + p.getEmail() + "\n\n"
                + "This action cannot be undone!",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            RegistrarDirectory registrarDir = business.getRegistrarDirectory();
            boolean deleted = registrarDir.deleteRegistrar(selectedRegistrar);

            if (deleted) {
                JOptionPane.showMessageDialog(this, "Registrar deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                selectedRegistrar = null;
                refreshTable();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete registrar", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable registrarTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox<String> searchTypeComboBox;
    private javax.swing.JButton showAllButton;
    private javax.swing.JButton viewEditButton;
    // End of variables declaration//GEN-END:variables
}
